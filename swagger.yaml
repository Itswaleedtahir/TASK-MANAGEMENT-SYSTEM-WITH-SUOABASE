openapi: 3.0.0
info:
  title: Task Management System API
  version: 1.0.0
  description: A comprehensive API for managing tasks, categories, and user authentication

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Something went wrong"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    SignupRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Work"
        user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Work"

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: "Complete Project"
        description:
          type: string
          example: "Finish the task management system"
        status:
          type: string
          enum: [pending, in_progress, completed, overdue]
          example: "pending"
        priority:
          type: string
          enum: [low, medium, high]
          example: "medium"
        due_date:
          type: string
          format: date-time
        category_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        assigned_to:
          type: string
          format: uuid
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        category:
          type: object
          properties:
            name:
              type: string
        assigned_user:
          type: object
          properties:
            email:
              type: string

    TaskRequest:
      type: object
      required:
        - title
        - category_id
      properties:
        title:
          type: string
          example: "Complete Project"
        description:
          type: string
          example: "Finish the task management system"
        due_date:
          type: string
          format: date-time
        category_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, in_progress, completed, overdue]
          default: pending
        priority:
          type: string
          enum: [low, medium, high]
          default: medium
        assigned_to:
          type: string
          format: uuid
          nullable: true

paths:
  /api/auth/signup:
    post:
      tags:
        - Authentication
      summary: Sign up a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      email:
                        type: string
                        format: email
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      description: Authenticate a user and receive a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/categories:
    get:
      tags:
        - Categories
      summary: List all categories
      description: Get all categories for the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Categories
      summary: Create a new category
      description: Create a new category for the authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/categories/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags:
        - Categories
      summary: Update a category
      description: Update an existing category
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
        '404':
          description: Category not found

    delete:
      tags:
        - Categories
      summary: Delete a category
      description: Delete an existing category
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Category deleted
        '401':
          description: Unauthorized
        '404':
          description: Category not found

  /api/tasks:
    get:
      tags:
        - Tasks
      summary: List all tasks
      description: Get all tasks for the authenticated user
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, in_progress, completed, overdue]
        - name: category_id
          in: query
          schema:
            type: string
            format: uuid
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high]
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Create a new task for the authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags:
        - Tasks
      summary: Update a task
      description: Update an existing task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '404':
          description: Task not found

    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: Delete an existing task
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Task deleted
        '401':
          description: Unauthorized
        '404':
          description: Task not found

  /api/tasks/{id}/status:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    patch:
      tags:
        - Tasks
      summary: Update task status
      description: Update the status of an existing task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, in_progress, completed, overdue]
      responses:
        '200':
          description: Task status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '404':
          description: Task not found

  /api/tasks/{id}/assign:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    patch:
      tags:
        - Tasks
      summary: Assign task to user
      description: Assign a task to another user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - assigned_to
              properties:
                assigned_to:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Task assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '404':
          description: Task not found
